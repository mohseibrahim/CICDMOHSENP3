version: 2.1
##Add the orbs stanza below your version, invoking the orb:
orbs:
  node: circleci/node@5.0.2
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |

            echo "Destroying environment:${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm S3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} -- RECURSIVE
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-forntend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
        workflow_id:
         type: string   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  

jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image : circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [test-frontend]     
     - run:
        command : |
          cd frontend
          npm i
          npm run test
     - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

     - save_cache:
          paths: [test-frontend]
          key: backend-build
                
  test-backend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]     
      - run:
         command : |
           cd backend
           npm i
           npm run test
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

      - save_cache:
          paths: [test-backend]
          key: backend-build

  scan-frontend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]   
      - run:
         command : |
           cd frontend
           npm i
           npm audit fix --force
           npm audit fix --force
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

      - save_cache:
          paths: [scan-frontend]
          key: backend-build

  scan-backend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]  
      - run:
         command : |
           cd backend
           npm i
           npm audit fix --force
           npm audit fix --force
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1


      - save_cache:
          paths: [scan-backend]
          key: backend-build

## slack notification job
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: pass
          template: success_tagged_deploy_1
       
  deploy-infrastructure:
    docker:
      - image: 'amazon/aws-cli'
    steps:
      - checkout 
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip            
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
         name: "wait 20 seconds for target connection to become reachable/usable."
         command: |        
           sleep 20
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch ~/inventory.txt
            echo "[web]" > ~/inventory.txt
            cat ~/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
               --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --output text >> ~/inventory.txt 
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt

      # Here's where you will add some code to rollback on failure  
      - destroy-environment    
 

    # Exercise: Config and Deployment

  configure-infrastructure: 
    docker:
      - image: python:3.9.13-alpine3.16 
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["87:e8:25:2e:80:5a:59:1e:76:3f:1c:5d:bf:4b:25:e2"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            cat ~/inventory.txt
            cat .circleci/ansible/configure-server.yml
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml      
      # Here's where you will add some code to rollback on failure  
      - destroy-environment    

  run-migrations:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout 
      - run:
          name: Run migrations
          command: |
                cd backend
                pwd
                ls
                npm i
                npm run build
                 ls
                npm run migrations > ~/migrations_dump.txt

              # npm audit fix --force
              # npm audit fix --force

                 
      - persist_to_workspace:
          root: ~/
          paths:
            - migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |

            if grep -q "has been executed successfully." ~/migrations_dump.txt
             then
               curl https://kvdb.io/RKvUYeEWNeYVev7m5dMd7u/migration_${CIRCLE_WORKFLOW_ID:0:7}  -k '1'
            fi

      # Here's where you will add some code to rollback on failure  
      #- destroy-environment        

  deploy-frontend:
    docker:
      - image: doctrine/nodejs-aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm run build
            
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
               --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
      #- destroy-environment    

  deploy-backend:
    docker:
      - image: python:3.9.13-alpine3.16 
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["87:e8:25:2e:80:5a:59:1e:76:3f:1c:5d:bf:4b:25:e2"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/      
      - run:
          name: Deploy backend
          command: |
            cd backend
            apk add --update npm
            apk add --update aws-cli
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            ls .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory  -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      #- destroy-environment     

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
                cd backend
                apk add curl 
                apk add --update nodejs npm 
                pip3 install awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
               --filters "Name=tag-value,Values=backend-ba77da3" \
               --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-ba77da3.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
               --filters "Name=tag-value,Values=backend-ba77da3" \
               --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl -s ${API_URL}/api/status | grep "ok"
            then
                return 0
            else
                return 1
            fi

      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: 'amazon/aws-cli'
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        - image: 'amazon/aws-cli'
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
                export OldWorkflowID=$(aws cloudformation \
                        list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                        --no-paginate --output text)
                echo OldWorkflowID: "${OldWorkflowID}"
                echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                # Fetch the stack names          
                export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                        --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                echo Stack names: "${STACKS[@]}"
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
              

workflows:
  default:
    jobs:
      # - build-frontend :
      #    context: cdond-c3-projectstarter
      # - build-backend :
      #    context: cdond-c3-projectstarter
      # - test-frontend:
      #    requires: [build-frontend]
      #    context: cdond-c3-projectstarter
      # - test-backend:
      #    requires: [build-backend]
      #    context: cdond-c3-projectstarter
      # - scan-backend:
      #     requires: [build-backend]
      #     context: cdond-c3-projectstarter
      # - scan-frontend:
      #     requires: [build-frontend]
      #     context: cdond-c3-projectstarter
      # - deploy-infrastructure:
      #     requires: [ ]
      # - configure-infrastructure:
      #       requires: [deploy-infrastructure]
      # - run-migrations:
      #       requires: [configure-infrastructure]
      # - deploy-frontend:
      #       requires: [configure-infrastructure]
      - deploy-backend:
         requires: []
      - smoke-test:
         requires: [deploy-backend]













      





      

